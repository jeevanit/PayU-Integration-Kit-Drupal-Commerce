<?php

define('COMMERCE_FIRSTDATA_BILLING_PHONE_FIELD', 'commerce_firstdata_billing_phone');
/**
 * @file
 * Provides an payu payment method for Drupal Commerce for testing and
 *   development.
 */

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_payu_commerce_payment_method_info() {
  $payment_methods = array();

  $display_title = t('payu Payment Gateway - India');

  $payment_methods['commerce_payu'] = array(
    'base' => 'commerce_payu',
    'title' => t('payu'),
    'short_title' => t('payu'),
    'display_title' => $display_title,
    'description' => t('payu Payment Gateway'),
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,
  );

  return $payment_methods;
}


/**
 * Payment method callback: settings form.
 */
function commerce_payu_settings_form($settings = NULL) {
  $form = array();

  // Merge default settings into the stored settings array.
  $default_currency = variable_get('commerce_default_currency', 'INR');

  $settings = (array) $settings + array(
    'key' => '',
    'salt' => '',
    'payment_mode' => 'TEST',
  );

  $form['key'] = array(
    '#type' => 'textfield',
    '#title' => t('key'),
    '#description' => t('Your payu Merchant Key.'),
    '#default_value' => $settings['key'],
    '#size' => 12,
    '#required' => TRUE,
  );
  $form['salt'] = array(
    '#type' => 'textfield',
    '#title' => t('Salt'),
    '#description' => t('Your payu account Salt.'),
    '#default_value' => $settings['salt'],
    '#size' => 12,
    '#required' => TRUE,
  );
  $form['payment_mode'] = array(
    '#type' => 'select',
    '#title' => t('Payment mode'),
    '#description' => t('The mode for capturing payment.'),
    '#options' => array(
      'LIVE' => t('Live transactions'),
      'TEST' => t('Test transactions only'),
    ),
    '#default_value' => $settings['payment_mode'],
  );
  $form['exchange_rate'] = array(
    '#type' => 'textfield',
    '#title' => t('Exchange rate'),
    '#description' => t("The rate of exchange between your site's default currency and INR. If left blank, currency_api is used."),
    '#size' => 5,
    '#default_value' => $settings['exchange_rate'],
  );
  return $form;
}

/**
 * Payment method callback: redirect form, a wrapper around the module's general
 *   use function for building a WPS form.
 */
function commerce_payu_redirect_form($form, &$form_state, $order, $payment_method) {

  // Return an error if the enabling action's settings haven't been configured.
  if (empty($payment_method['settings']['key']) || empty($payment_method['settings']['salt'])) {
    drupal_set_message(t('payu is not configured for use. Please check the payu account details.'), 'error');
    return array();
  }

  $settings = array(
    // Return to the previous page when payment is canceled
    'cancel_return' => url('checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),

    // Return to the payment redirect page for processing successful payments
    'return' => url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE, 'query' => array('DR' => '{DR}'))),

    // Specify the current payment method instance ID in the notify_url
    'pay_method' => $payment_method['instance_id'],
  );

  return commerce_payu_order_form($form, $form_state, $order, $payment_method['settings'] + $settings);
}

/**
 * Payment method callback: redirect form return validation.
 */
function commerce_payu_redirect_form_validate($order, $payment_method) {
    $response=array();
    $response=$_POST;
    $txnid = $_POST['txnid'];
    $order_id = check_plain($response['MerchantRefNo']);
    if($_POST['mihpayid'])      
      $payment_id = $_POST['mihpayid'];
    else    
      $payment_id = check_plain($response['PaymentID']);
    $amount = check_plain($response['Amount']);
    $transaction_id = check_plain($response['TransactionID']);
    $response_code = check_plain($response['ResponseCode']);
    $description = check_plain($response['Description']);
    $mode = check_plain($response['Mode']);
    $response_reason_text = check_plain($response['ResponseMessage']);
    watchdog('commerce_payu', 'Receiving payment response for order !order_id from PayU', array('!order_id' => $order_id));

    $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
    //check the currency and convert it back to the amount
    $currency_code = $order_wrapper->commerce_order_total->currency_code->value();

    if ($currency_code != 'INR') {
      if ($payment_method['settings']['exchange_rate']) {
        $inr_total = $amount / $payment_method['settings']['exchange_rate'];
      }
      else {
        $from = 'INR';
        $to = $currency_code;
        $ret  = currency_api_convert($from, $to, $amount);
        if ($ret['status'] == FALSE) {
          drupal_set_message(t('An error occured: ') . $ret['message']);
          return array();
        }
        else {
          $inr_total = $ret['value'];
        }
      }
    }
    else {
      $inr_total = $amount;
    }
    if ($order->order_id != $order_id) {
      $auth_successful = FALSE;
    }
    else {
      $auth_successful = TRUE;
    }
    if (!$auth_successful || !$order) { // invalid response
      $message = t("We're sorry, but due to a technical problem, your order could not be processed. Please try placing the order again later.");
      watchdog('commerce_payu', 'An unauthenticated response from payu made it to checkout, Order id didn\'t match! Response: !Response :.', array('!Response' => print_r($response, TRUE)), WATCHDOG_ERROR);
    }
    else {
      $quantity = commerce_line_items_quantity($order_wrapper->commerce_line_items, commerce_product_line_item_types());
      if ($quantity > 0) {

        // Prepare a transaction object to log the API response.
        $transaction = commerce_payment_transaction_new('commerce_payu', $order->order_id);
        $transaction->instance_id = $payment_method['instance_id'];
        $transaction->remote_id = $transaction_id;
        $transaction->remote_status = $mode;
        $transaction->amount = commerce_currency_decimal_to_amount($amount, $currency_code);
        $transaction->currency_code = $currency_code;
        $transaction->payload[REQUEST_TIME] = $response;

        if ($response_code == '0') { // order APPROVED (1)
          $gateway_method = $payment_method['settings']['payment_mode'];
          $message = t('Authorized by !method order with Transaction id: !transaction_id. (payment id : !payment_id, description: !description) !reason_text',
            array(
              '!method' => $gateway_method,
              '!transaction_id' => $transaction_id,
              '!payment_id' => $payment_id,
              '!description' => $description,
              '!reason_text' => $response_reason_text,
            ));
          $transaction->message = $message;
          $message = '';
          $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
          commerce_payment_transaction_save($transaction);
          commerce_payment_redirect_pane_next_page($order);
//  }
        }
        else {
          $message = t('The transaction was declined by the credit card company. Reason provided: !reason_text', array('!reason_text' => $response_reason_text));
          $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
          $transaction->message = t('There was a problem with your order: !response_code  !reason_text', array('!response_code' => check_plain($response_code), '!reason_text' => $response_reason_text));
          commerce_payment_transaction_save($transaction);
          commerce_payment_redirect_pane_previous_page($order);
        }
      }
      else { // order is invalid or empty
        watchdog('commerce_payu', 'An invalid or empty order made it to checkout.  Order ID: !order_id', array('!order_id' => $order_id), WATCHDOG_ERROR);
      }
    }
  }


/**
 * Builds a payu Paymentform from an order object.
 *
 * @param $order
 *   The fully loaded order being paid for.
 * @param $settings
 *   An array of settings used to build out the form, including:
 *   - server: which server to use, either sandbox or live
 *   - business: the PayPal e-mail address the payment submits to
 *   - cancel_return: the URL PayPal should send the user to on cancellation
 *   - return: the URL PayPal should send the user to on successful payment
 *   - currency_code: the PayPal currency code to use for this payment if the
 *     total for the order is in a non-PayPal supported currency
 *   - language: the PayPal language code to use on the payment form
 *   - payment_action: the PayPal payment action to use: sale, authorization,
 *     or order
 *   - payment_method: optionally the name of the Commerce payment method to
 *     include in the IPN notify_url
 *
 * @return
 *   A renderable form array.
 */
function commerce_payu_order_form($form, &$form_state, $order, $settings) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

  $currency_code = $order_wrapper->commerce_order_total->currency_code->value();


  // Ensure a default value for the payment_method setting.
  $settings += array('payment_method' => '');

  // Get the order total in the default currency.
  $order_total = $order_wrapper->commerce_order_total->amount->value();
  $amount = commerce_currency_amount_to_decimal($order_total, $currency_code);

  // Convert any monetary value from the store's currency to Indian Rupees.
  if ($currency_code != 'INR') {
    if ($settings['exchange_rate']) {
      $inr_total = $amount * $settings['exchange_rate'];
    }
    else {
      $from = $currency_code;
      $to = 'INR';
      $ret  = currency_api_convert($from, $to, $amount);
      if ($ret['status'] == FALSE) {
        drupal_set_message(t('An error occured: ') . $ret['message']);
        return array();
      }
      else {
        $inr_total = $ret['value'];
      }
    }
  }
  else {
    $inr_total = $amount;
  }

  // Build a description for the order.
  $description = array();

  foreach ($order_wrapper->commerce_line_items as $delta => $line_item_wrapper) {
    if (in_array($line_item_wrapper->type->value(), commerce_product_line_item_types())) {
      $description[] = round($line_item_wrapper->quantity->value(), 2) . 'x ' . $line_item_wrapper->line_item_label->value();
    }
  }

  // Prepare the billing address for use in the request.
  $billing_address = $order_wrapper->commerce_customer_billing->commerce_customer_address->value();


  $return_url = urldecode(url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('query' => array('DR' => '{DR}'), 'absolute' => TRUE)));
  // Build the data array that will be translated into hidden form values.
  $key = $settings['key'];
  $salt = $settings['salt'];
  $txnid = $order->order_id+673561123;
  $productinfo=drupal_substr(implode(', ', $description), 0, 255);
  $email=drupal_substr($order->mail, 0, 100);
  $firstname=drupal_substr($billing_address['name_line'], 0, 128);
  //secure hash validation
  //$string =  $settings['secret_key'] . '|' . $settings['account_id'] . '|' . $inr_total . '|' .   $order->order_id . '|' . $return_url . '|' .  $settings['payment_mode'];
  $string = $key . '|' . $txnid . '|' . $amount . '|' . $productinfo . '|' . $firstname . '|' . $email . '|||||||||||' . $salt;
  $hash = strtolower(hash('sha512', $string));
  $data = array(
    'hash' => $hash,
    'key' => $key,
    'txnid' => $txnid,
    'amount' => $inr_total,
    'surl' => $return_url,
    'furl' => $return_url,
    'firstname' => $firstname,
    'address' => drupal_substr($billing_address['thoroughfare'], 0, 255),
    'city' => drupal_substr($billing_address['locality'], 0, 32),
    'state' => drupal_substr($billing_address['administrative_area'], 0, 32),
    'postal_code' => drupal_substr($billing_address['postal_code'], 0, 10),
    'country' => $billing_address['country'],
    'phone' => $order_wrapper->commerce_customer_billing->commerce_firstdata_billing_phone->value(),
    'productinfo' => $productinfo,
    'email' => $email,
    'hash'=> $hash,
    'ship_name' => drupal_substr($billing_address['name_line'], 0, 128),
    'ship_address' => drupal_substr($billing_address['thoroughfare'], 0, 255),
    'ship_city' => drupal_substr($billing_address['locality'], 0, 32),
    'ship_state' => drupal_substr($billing_address['administrative_area'], 0, 32),
    'ship_postal_code' => drupal_substr($billing_address['postal_code'], 0, 10),
    'ship_country' => $billing_address['country'],
    'ship_phone' => $order_wrapper->commerce_customer_billing->commerce_firstdata_billing_phone->value(),
  );

  // Put the data on a form.
  foreach ($data as $name => $value) {
    $form[$name] = array('#type' => 'hidden', '#value' => $value);
  }
  if($settings['payment_mode']=='LIVE')
  $form['#action'] = 'https://secure.payu.in/_payment';
else 
  $form['#action'] = 'https://test.payu.in/_payment';

  return $form;
}

/**
 * Implementation of hook_enable()
 **/
function commerce_payu_enable() {
  // add phone number field to billing profile type
  commerce_payu_add_phone_field();

  // tell user a new field has been added
  $message_text = 'Commerce payu added a new field to your "billing" customer profile for a phone number. ' .
                  'If you already have one enabled, you must !disablelink now to avoid customer ' .
                  'confusion during checkout.';
  $message = t($message_text, array('!disablelink' => l('disable one', 'admin/commerce/customer-profiles/types/billing/fields')));
  drupal_set_message($message, 'warning');
}

/**
 * commerce_customer module creates a customer profile type called "billing".
 * This profile type only has the field "addressfield", which does not include
 * a phone number. First Data requires a phone number for transactions, so we
 * create our own.
 **/
function commerce_payu_add_phone_field() {
  // Look for or add a billing phone number field to add to billing customer profile
  $field = field_info_field(COMMERCE_FIRSTDATA_BILLING_PHONE_FIELD);
  $instance = field_info_instance('commerce_customer_profile', COMMERCE_FIRSTDATA_BILLING_PHONE_FIELD, 'billing');

  if (empty($field)) {
    $field = array(
      'field_name' => COMMERCE_FIRSTDATA_BILLING_PHONE_FIELD,
      'type' => 'text',
      'cardinality' => 1,
      'entity_types' => array('commerce_customer_profile'),
      'translatable' => FALSE,
      'locked' => FALSE,
    );

    $field = field_create_field($field);
  }

  if (empty($instance)) {
    $instance = array(
      'field_name' => COMMERCE_FIRSTDATA_BILLING_PHONE_FIELD,
      'entity_type' => 'commerce_customer_profile',
      'bundle' => 'billing',
      'label' => t('Phone Number'),
      'required' => TRUE,
      'widget' => array(
        'type' => 'text_textfield',
      ),
      'settings' => array(),
      'display' => array(),
    );

    // Set the default display formatters for various view modes.
    foreach (array('default', 'customer', 'administrator') as $view_mode) {
      $instance['display'][$view_mode] = array(
        'label' => 'hidden',
        'type' => 'text_default',
        'weight' => -10,
      );
    }

    field_create_instance($instance);
  }
}
